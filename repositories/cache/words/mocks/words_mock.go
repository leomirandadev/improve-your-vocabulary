// Code generated by MockGen. DO NOT EDIT.
// Source: words.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/leomirandadev/improve-your-vocabulary/entities"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockICache) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockICacheMockRecorder) DeleteAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockICache)(nil).DeleteAll), ctx)
}

// GetAll mocks base method.
func (m *MockICache) GetAll(ctx context.Context, ownerID uint64) ([]entities.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, ownerID)
	ret0, _ := ret[0].([]entities.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICacheMockRecorder) GetAll(ctx, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICache)(nil).GetAll), ctx, ownerID)
}

// SetAll mocks base method.
func (m *MockICache) SetAll(ctx context.Context, words []entities.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAll", ctx, words)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAll indicates an expected call of SetAll.
func (mr *MockICacheMockRecorder) SetAll(ctx, words interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockICache)(nil).SetAll), ctx, words)
}
